[[_first_time]]
=== 初次設定 Git

現在你已經安裝 Git 在你的系統上，你或許會想要客製化你的 Git 環境。
你在一台電腦上只需做這些工作一次，這些設定在版本更新時會被保留下來。
你也可以藉由執行命令隨時變更這些設定。

Git 附帶一個名為 `git config` 的工具，讓你能夠取得和設定組態參數。這些參數允許你控制 Git 的外觀和操作方式。(((git commands, config)))
這些參數被存放在下列三個地方：

1. 檔案 `/etc/gitconfig`：包含該系統所有使用者和使用者倉儲的數值。如果你傳遞 `--system` 參數給 `git config`，它就會讀取或者寫入參數到這個檔案。
2. 檔案 `~/.gitconfig` 、 `~/.config/git/config`：你自己的帳號使用。只要你傳遞 `--global` 參數就可以命令 Git 讀取或寫入參數到這個檔案。
3. 不管你正在使用的倉儲是什麼，你可以修改在 Git 資料夾內的設定檔（換句話說，就是 `.git/config`） :針對目前使用的倉儲。

Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.

On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.

==== Your Identity

The first thing you should do when you install Git is to set your user name and e-mail address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or e-mail address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor, which is generally Vim.
If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Vim and Emacs are popular text editors often used by developers on Unix based systems like Linux and Mac. If you are not familiar with either of these editors or are on a Windows system, you may need to search for instructions for how to set up your favorite editor with Git.  
If you don't set an editor like this and you don't know what Vim or Emacs are, you will likely get into a really confusing state when they are launched.
====

==== Checking Your Settings

If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
